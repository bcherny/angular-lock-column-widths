// Generated by CoffeeScript 1.7.1
describe('angular-lock-column-widths', function() {
  beforeEach(module('turn/lockColumnWidths'));
  beforeEach(function() {
    return inject((function(_this) {
      return function($compile, $rootScope) {
        _this.scope = $rootScope.$new();
        _this.element = angular.element("<table lock-column-widths>\n	<thead>\n		<tr>\n			<th></th>\n			<th></th>\n			<th></th>\n			<th></th>\n		</tr>\n		<tr>\n			<th></th>\n			<th></th>\n			<th></th>\n			<th></th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td></td>\n			<td></td>\n			<td></td>\n			<td></td>\n		</tr>\n		<tr>\n			<td></td>\n			<td></td>\n			<td></td>\n			<td></td>\n		</tr>\n	</tbody>\n</table>");
        ($compile(_this.element))(_this.scope);
        _this.scope.$digest();
        return _this.scope = _this.element.scope();
      };
    })(this));
  });
  describe('#getThs', function() {
    it('should return scope.ths if it exists', function() {
      this.scope.ths = 'foo';
      return expect(this.scope.getThs()).toBe(this.scope.ths);
    });
    it('should return an array of all <th>\'s in the element if scope.ths doesn\'t exist', function() {
      this.scope.ths = null;
      return expect(this.scope.getThs()).toEqual(this.element.find('th'));
    });
    return it('should set scope.ths equal to the <th> array', function() {
      this.scope.ths = null;
      this.scope.getThs();
      return expect(this.scope.ths).toEqual(this.element.find('th'));
    });
  });
  describe('#lockColumnWidth', function() {
    return it('should set the passed <th>\'s CSS width equal to its computed width', function() {
      var element;
      element = (this.element.find('th'))[0];
      this.scope.lockColumnWidth(element);
      return expect(element.style.width).toBe((this.element.find('th'))[0].offsetWidth + 'px');
    });
  });
  describe('#unlockColumnWidth', function() {
    return it('should set the passed <th>\'s CSS width equal to to an empty string', function() {
      var element;
      element = (this.element.find('th'))[0];
      this.scope.unlockColumnWidth(element);
      return expect(element.style.width).toBe('');
    });
  });
  describe('#lockColumnWidths', function() {
    it('should call #getThs with no arguments', function() {
      spyOn(this.scope, 'getThs').and.callThrough();
      this.scope.lockColumnWidths();
      return expect(this.scope.getThs).toHaveBeenCalledWith;
    });
    return it('should call #lockColumnWidth with each <th>', function() {
      spyOn(this.scope, 'lockColumnWidth');
      this.scope.lockColumnWidths();
      expect(this.scope.lockColumnWidth.calls.count()).toEqual(this.scope.ths.length);
      return expect(this.scope.lockColumnWidth.calls.allArgs()).toEqual(([].slice.call(this.scope.ths)).map(function(th, n) {
        return [th, n];
      }));
    });
  });
  return describe('#unlockColumnWidths', function() {
    it('should call #getThs with no arguments', function() {
      spyOn(this.scope, 'getThs').and.callThrough();
      this.scope.unlockColumnWidths();
      return expect(this.scope.getThs).toHaveBeenCalledWith;
    });
    return it('should call #unlockColumnWidth with each <th>', function() {
      spyOn(this.scope, 'unlockColumnWidth');
      this.scope.unlockColumnWidths();
      expect(this.scope.unlockColumnWidth.calls.count()).toEqual(this.scope.ths.length);
      return expect(this.scope.unlockColumnWidth.calls.allArgs()).toEqual(([].slice.call(this.scope.ths)).map(function(th, n) {
        return [th, n];
      }));
    });
  });
});
